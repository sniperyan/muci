/*eslint no-console: 'off'*/
'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// // Ensure environment variables are read.
// require('../config/env');
// // @remove-on-eject-begin
// // Do the preflight check (only happens before eject).
// const verifyPackageTree = require('./utils/verifyPackageTree');
// if (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {
//     verifyPackageTree();
// }
// const verifyTypeScriptSetup = require('./utils/verifyTypeScriptSetup');
// verifyTypeScriptSetup();
// // @remove-on-eject-end

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('../dev-utils/clearConsole');
// const checkRequiredFiles = require('../dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  // prepareProxy,
  prepareUrls,
} = require('../dev-utils/WebpackDevServerUtils');
const openBrowser = require('../dev-utils/openBrowser');
// const paths = require('../config/paths');
const config = require('../build/webpack.config.dev');
const createDevServerConfig = require('../build/webpackDevServer.config');
const utils = require('../build/utils');
function resolve(dir) {
  return utils.resolve(dir);
}

const useYarn = fs.existsSync(resolve('yarn.lock'));
const isInteractive = process.stdout.isTTY;

const userconfig = require('../config');
// automatically open browser, if not set will be false
const autoOpenBrowser = !!userconfig.dev.autoOpenBrowser;

// Warn and crash if required files are missing
// if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
//     process.exit(1);
// }

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = userconfig.dev.port || 3000;
const HOST = userconfig.dev.host || '0.0.0.0';

if (HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`
  );
  console.log();
}



// if (DEFAULT_PORT == null) {
//     // We have not found a port.
//     return;
// }
// const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
// const appName = require(resolve('package.json')).name;
// const urls = prepareUrls(protocol, HOST, DEFAULT_PORT);
// // Create a webpack compiler that is configured with custom messages.
// const compiler = createCompiler(webpack, config, appName, urls, useYarn);
// // Load proxy config
// const proxySetting = require(resolve('package.json')).proxy;
// const proxyConfig = prepareProxy(proxySetting, resolve('public'));
// // Serve webpack assets generated by the compiler over a web server.
// const serverConfig = createDevServerConfig(
//     proxyConfig,
//     urls.lanUrlForConfig
// );
// const devServer = new WebpackDevServer(compiler, serverConfig);
// // Launch WebpackDevServer.
// devServer.listen(DEFAULT_PORT, HOST, err => {
//     if (err) {
//         return console.log(err);
//     }
//     if (isInteractive) {
//         clearConsole();
//     }
//     console.log(chalk.cyan('Starting the development server...\n'));
//     autoOpenBrowser && openBrowser(urls.localUrlForBrowser);
// });

// ['SIGINT', 'SIGTERM'].forEach(function (sig) {
//     process.on(sig, function () {
//         devServer.close();
//         process.exit();
//     });
// });

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
// const { checkBrowsers } = require('react-dev-utils/browsersHelper');
// checkBrowsers(resolve('./'), isInteractive)
//     .then(() => {
//         // We attempt to use the default port but if it is busy, we offer the user to
//         // run on a different port. `choosePort()` Promise resolves to the next free port.
//         return choosePort(HOST, DEFAULT_PORT);
//     })
//     .then(port => {
        
//     })
//     .catch(err => {
//         if (err && err.message) {
//             console.log(err.message);
//         }
//         process.exit(1);
//     });


// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('../dev-utils/browsersHelper');
checkBrowsers(resolve('./'), isInteractive)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = userconfig.dev.useHttps === true ? 'https' : 'http';
    const appName = require(resolve('package.json')).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    // const proxySetting = require(resolve('package.json')).proxy;
    const proxyConfig = userconfig.dev.proxyTable;
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      proxyConfig.proxy,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      return autoOpenBrowser && openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });